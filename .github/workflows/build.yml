name: Build & Release Aseprite

on:
  push:
    tags:
      - 'v*'
  workflow_dispatch:
    inputs:
      version:
        description: 'Version number (e.g., 1.2.3)'
        required: true
        type: string

jobs:
  build:
    runs-on: ${{ matrix.os }}
    strategy:
      fail-fast: false
      matrix:
        os: [windows-latest, ubuntu-latest, macos-latest]

    steps:
      - uses: actions/checkout@v4
        with:
          submodules: recursive

      - name: Cache build
        id: cache-build
        uses: actions/cache@v4
        with:
          path: aseprite/build
          key: build-${{ matrix.os }}-${{ github.ref_name }}
          restore-keys: |
            build-${{ matrix.os }}-
            build-

      - name: Install Dependencies (Linux)
        if: runner.os == 'Linux'
        shell: bash
        run: |
          sudo apt-get update -qq
          sudo apt-get install -y \
            libpixman-1-dev libfreetype6-dev libharfbuzz-dev zlib1g-dev \
            libx11-dev libxcursor-dev libxi-dev libgl1-mesa-dev libfontconfig1-dev

      - name: Install Dependencies (macOS)
        if: runner.os == 'macOS'
        shell: bash
        run: brew install cmake ninja ccache pkg-config

      - name: Install Skia
        shell: bash
        run: |
          if [[ "${{ runner.os }}" == "Windows" ]] ; then
            this_dir=$(cygpath "${{ github.workspace }}")
          else
            this_dir="${{ github.workspace }}"
          fi
          skia_url=$(source $this_dir/aseprite/laf/misc/skia-url.sh | xargs)
          skia_file=$(basename $skia_url)
          curl --ssl-revoke-best-effort -L -o "$skia_file" "$skia_url"
          unzip "$skia_file" -d skia

      - name: Install OpenSSL (Windows)
        if: runner.os == 'Windows'
        shell: pwsh
        run: choco install -y openssl --version=1.1.1.2000

      - name: Install Ninja
        uses: aseprite/get-ninja@main

      - uses: ilammy/msvc-dev-cmd@v1
        if: runner.os == 'Windows'

      - name: Configure CMake
        if: steps.cache-build.outputs.cache-hit != 'true'
        shell: bash
        working-directory: aseprite
        run: |
          if [[ "${{ runner.os }}" == "macOS" ]] ; then
            export skia_arch=arm64
          else
            export skia_arch=x64
          fi
          
          cmake -S . -B build -G Ninja \
            -DCMAKE_BUILD_TYPE=RelWithDebInfo \
            -DCMAKE_OSX_DEPLOYMENT_TARGET=10.9 \
            -DLAF_BACKEND=skia \
            -DENABLE_SCRIPTING=on \
            -DENABLE_TESTS=OFF \
            -DSKIA_DIR=$(realpath ../skia) \
            -DSKIA_LIBRARY_DIR=$(realpath ../skia/out/Release-$skia_arch)

      - name: Build
        if: steps.cache-build.outputs.cache-hit != 'true'
        shell: bash
        working-directory: aseprite
        run: cmake --build build --config RelWithDebInfo --parallel

      - name: Copy OpenSSL DLLs (Windows)
        if: runner.os == 'Windows'
        shell: pwsh
        continue-on-error: true
        run: |
          $opensslBin = "C:\Program Files\OpenSSL\bin"
          try {
            Copy-Item "$opensslBin\libcrypto-1_1-x64.dll" -Destination aseprite/build/bin/ -ErrorAction Stop
            Copy-Item "$opensslBin\libssl-1_1-x64.dll" -Destination aseprite/build/bin/ -ErrorAction Stop
            Write-Host "✅ Copied OpenSSL DLLs"
          } catch {
            Write-Warning "⚠️ OpenSSL DLLs not found — continuing anyway. Download and install OpenSSL 1.1.1.2000 from https://community.chocolatey.org/packages/openssl/1.1.1.2000"
          }

      - name: Set Version
        id: version
        shell: bash
        run: |
          if [[ "${{ github.event_name }}" == "workflow_dispatch" ]]; then
            echo "version=v${{ github.event.inputs.version }}" >> $GITHUB_OUTPUT
          else
            echo "version=${{ github.ref_name }}" >> $GITHUB_OUTPUT
          fi

      - name: Package Build
        shell: bash
        run: |
          cd aseprite/build
          if [[ "${{ runner.os }}" == "Windows" ]]; then
            7z a ../aseprite-${{ steps.version.outputs.version }}-windows-full.zip .
            7z a ../aseprite-${{ steps.version.outputs.version }}-windows-bin.zip ./bin
          elif [[ "${{ runner.os }}" == "Linux" ]]; then
            tar -czf ../aseprite-${{ steps.version.outputs.version }}-linux.tar.gz .
          elif [[ "${{ runner.os }}" == "macOS" ]]; then
            tar -czf ../aseprite-${{ steps.version.outputs.version }}-macos.tar.gz .
          fi

      - name: Create Tag (Manual Trigger)
        if: github.event_name == 'workflow_dispatch'
        run: |
          git config --local user.email "action@github.com"
          git config --local user.name "GitHub Action"
          git tag ${{ steps.version.outputs.version }}
          git push origin ${{ steps.version.outputs.version }}

      - name: Upload Release Assets
        uses: softprops/action-gh-release@v2
        with:
          tag_name: ${{ steps.version.outputs.version }}
          files: |
            aseprite/*.zip
            aseprite/*.tar.gz
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
